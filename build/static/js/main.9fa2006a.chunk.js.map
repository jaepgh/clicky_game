{"version":3,"sources":["components/footer/footer.jsx","components/nav/nav.jsx","components/card/card.jsx","components/board/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Nav","props","href","id","messageAnimation","message","currentScore","topScore","CardGuess","key","value","onClick","alt","src","image","Board","array","map","element","card_card","App","state","data","getCurrentScore","_this","filter","clicked","length","handleClick","Object","toConsumableArray","selected","objectSpread","shuffle","console","log","setState","getBoardAnimation","getMessageAnimation","nav_nav","this","board","footer_footer","i","j","Math","floor","random","_ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fa2006a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer bg-dark\">\r\n      <div className=\"container\">\r\n        <span className=\"text-white\">\r\n          Clicky Game &copy; 2018 Jose A Esquivel\r\n        </span>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./nav.css\";\r\n\r\nconst Nav = props => {\r\n  return (\r\n    <nav className=\"navbar sticky-top navbar-dark bg-dark\">\r\n      <ul className=\"navbar-nav navbar-expand-sm col-12 \">\r\n        <li className=\"brand col-4 text-white mb-1 mt-1 text-left pl-5\">\r\n          <a href=\"/\" className=\"text-white\">\r\n            <i className=\"far fa-grin-beam-sweat fa-3x te \" />\r\n          </a>\r\n        </li>\r\n\r\n        <li className=\"nav-item col-4 text-white mb-1 mt-1\" id=\"message\">\r\n          <h4 className={props.messageAnimation}>{props.message}</h4>\r\n        </li>\r\n        <li className=\"nav-item text-white col-4 mb-1 mt-1\" id=\"score\">\r\n          <h4>\r\n            Current Score: {props.currentScore} | Top Score: {props.topScore}\r\n          </h4>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./card.css\";\r\n\r\nconst CardGuess = props => {\r\n  return (\r\n    <div className=\"col-md-4 \">\r\n      <div\r\n        className=\"card mb-4\"\r\n        key={props.id}\r\n        value={props.id}\r\n        onClick={() => props.onClick(props.id)}\r\n      >\r\n        <div className=\"img-container\">\r\n          <img alt=\"Animal\" src={props.image} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardGuess;\r\n","import React from \"react\";\r\nimport CardGuess from \"../card\";\r\n\r\nconst Board = props => {\r\n  return (\r\n    <main className=\"row\">\r\n      {props.array.map(element => (\r\n        <CardGuess\r\n          key={element.id}\r\n          onClick={props.onClick}\r\n          id={element.id}\r\n          image={element.image}\r\n        />\r\n      ))}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Footer from \"./components/footer\";\nimport Nav from \"./components/nav\";\nimport Board from \"./components/board\";\nimport data from \"./data/data.json\";\n\nclass App extends Component {\n  state = {\n    topScore: 0,\n    data,\n    message: \"Click an image to begin!\"\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Nav\n          message={this.state.message}\n          currentScore={this.getCurrentScore()}\n          topScore={this.state.topScore}\n          messageAnimation={this.getMessageAnimation()}\n        />\n        <div className={this.getBoardAnimation()}>\n          <Board array={this.state.data} onClick={this.handleClick} />\n        </div>{\" \"}\n        <Footer />\n      </div>\n    );\n  }\n  getCurrentScore = () => {\n    return this.state.data.filter(element => element.clicked).length;\n  };\n\n  handleClick = id => {\n    const data = [...this.state.data];\n    const selected = data.filter(element => element.id === id)[0];\n    let message = \"\";\n    let topScore = this.state.topScore;\n\n    if (selected.clicked) {\n      //Game Over\n      message = \"You guessed incorrectly!\";\n      data.map(element => (element.clicked = false));\n    } else {\n      //Continue the game\n      selected.clicked = true;\n      message = \"You guessed correctly!\";\n      data.filter(element => element.id === id)[0] = { ...selected };\n\n      if (topScore < this.getCurrentScore()) {\n        topScore = this.getCurrentScore();\n      }\n    }\n\n    this.shuffle(data);\n    console.log(data);\n    this.setState({ data, message, topScore });\n  };\n\n  shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  getBoardAnimation = () => {\n    if (this.state.message === \"You guessed incorrectly!\") {\n      return \"container pt-5 pb-3 animated bounceIn\";\n    } else {\n      return \"container pt-5 pb-3\";\n    }\n  };\n  getMessageAnimation = () => {\n    if (this.state.message === \"You guessed incorrectly!\") {\n      return \"text-danger animated flash\";\n    } else {\n      return \"\";\n    }\n  };\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}